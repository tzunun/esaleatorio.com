---
title: "Spleeter – Source Separation Engine" 
date: 2020-05-18 
draft: false 
---

Story source:

https://deezer.io/releasing-spleeter-deezer-r-d-source-separation-engine-2b88985e797e


# Releasing Spleeter: Deezer Research source separation engine

## In a nutshell

We are releasing [**Spleeter**](http://github.com/deezer/spleeter) to help the
research community in Music Information Retrieval (MIR) leverage the power of
a state-of-the-art source separation algorithm. It comes in the form of a
Python Library based on [Tensorflow](https://www.tensorflow.org/), with
pretrained models for 2, 4 and 5 stems separation. **Spleeter** will be
presented and live-demoed at the 2019 [ISMIR
conference](https://ismir2019.ewi.tudelft.nl/) in Delft.

##  **A brief overview of source separation**

While not a broadly known topic, the problem of source separation has
interested a large community of music signal researchers for a couple of
decades now. It starts from a simple observation: music recordings are usually
a mix of several individual instrument tracks (lead vocal, drums, bass, piano
etc..). The task of music source separation is: given a mix can we recover
these separate tracks (sometimes called _stems_ )? This has many potential
applications: think remixes, upmixing, active listening, educational purposes,
but also pre-processing for other tasks such as transcription.

From a Mix of many instruments, a source separation engine like **Spleeter**
outputs a set of individual tracks or stems.

Interestingly, our brain is very good at isolating instruments. Just focus on
one of the instrument of [this track](https://www.deezer.com/track/2124880)
(say the lead vocal for instance) and you will be able to _hear_ it quite
distinctively from the others. Yet that’s not really separation, you still
hear all the other parts. In many cases, it may not be possible to exactly
recover the individual tracks that have been mixed together. The challenge is
thus to approximate them the best we can, that is to say as close as possible
to the originals without creating too much distortions.

For years, a lot of strategies have been explored, by dozens of brilliant
research teams from all over the world. If you’re interested in this
fascinating journey you should go read [this literature
overview,](https://sigsep.github.io/literature/) or [this
one](http://zafarrafii.com/Publications/Rafii-Liutkus-Stoter-Mimilakis-
FitzGerald-
Pardo%20-%20An%20Overview%20of%20Lead%20and%20Accompaniment%20Separation%20in%20Music%20-%202018.pdf).
The pace of progress has recently made some giant leaps, mainly due to
advances in machine learning methods. To keep track, people have been
comparing their algorithm in [international evaluation
campaigns](https://sisec18.unmix.app/#/). That’s how we know that **Spleeter**
performances match those of the best proposed algorithms.

Additionally, **Spleeter** is _very_ fast. If you are running the GPU version
you can expect separating **100x faster than real-time** which makes it a good
option to process large datasets.

## What can I do with Spleeter ?

Quite a lot I’d say. If you’re a researcher working on Music Information
Retrieval and have always considered that source separation artifacts made it
unsuitable as a pre-processing step in your pipeline... Well, you should
probably reconsider and try **Spleeter**. If you are a music hacker and want
to build something awesome using **Spleeter** , then go ahead. Actually
**Spleeter** is [MIT-Licensed](https://opensource.org/licenses/MIT) so you are
_really_ free to use it in any way you want. It goes without saying that if
you plan to use **Spleeter** on copyrighted songs, make sure you get proper
authorization from right owners beforehand.

## How can I use Spleeter ?

Under the hood, **Spleeter** is a fairly complex and crafted engine but we’ve
worked hard to make it really easy to use. The actual separation can be
achieved with a [single command
line](https://github.com/deezer/spleeter/wiki/2.-Getting-started#usage), and
it should work on your laptop regardless of your Operating System. For more
advanced users, there is a python API class called
`[Separator](https://github.com/deezer/spleeter/wiki/4.-API-
Reference#separator)` that you can manipulate directly into your usual
pipeline.

We’ve tried hard to come up with a [thorough
documentation](https://github.com/Deezer/spleeter/wiki). Don’t hesitate to
give us feedback, point out issues or suggest improvement through the
traditional github tools!

